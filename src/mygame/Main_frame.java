/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mygame;

import com.jme3.math.Vector3f;
import com.jme3.system.AppSettings;
import java.awt.Color;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Amir72c
 */
public class Main_frame extends javax.swing.JFrame {

    /**
     * Creates new form Main_frame
     */
    public Main_frame() {
        initComponents();
        myinitComponents();
        setLocationRelativeTo(null);

    }

    private void myinitComponents() {
        main_frame = Main_frame.getFrames();
        axis.setBounds(10, 10, (frame_width / 2) - 10, frame_height - 220);
        axis.setVisible(true);
        getContentPane().add(axis);
        black_white_axis.setBounds((frame_width / 2) + 10, 10, (frame_width / 2) - 20, frame_height - 220);
        black_white_axis.setVisible(true);
        getContentPane().add(black_white_axis);
        main_frame[0].setSize(frame_width, frame_height);
        main_frame[0].revalidate();
        main_frame[0].repaint();
        Generated_code.setText("G_code will be generated here!");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        image_loader = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Generated_code = new javax.swing.JTextArea();
        codegen = new javax.swing.JButton();
        view = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        WP_width = new javax.swing.JTextField();
        WP_height = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        MD_depth = new javax.swing.JTextField();
        save = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        SS = new javax.swing.JTextField();
        threshold = new javax.swing.JSlider();
        isinversed = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cataphract G_code generator");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        image_loader.setText("Load image");
        image_loader.setToolTipText("");
        image_loader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                image_loaderActionPerformed(evt);
            }
        });

        jButton2.setText("Exit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Generated_code.setEditable(false);
        Generated_code.setColumns(20);
        Generated_code.setRows(5);
        jScrollPane1.setViewportView(Generated_code);

        codegen.setText("Generate code");
        codegen.setEnabled(false);
        codegen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codegenActionPerformed(evt);
            }
        });

        view.setText("View model");
        view.setEnabled(false);
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });

        jLabel1.setText("Work piece width");

        jLabel2.setText("Work piece height");

        WP_width.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WP_widthActionPerformed(evt);
            }
        });

        WP_height.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WP_heightActionPerformed(evt);
            }
        });

        jLabel4.setText("Max drilling depth");

        MD_depth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MD_depthActionPerformed(evt);
            }
        });

        save.setText("Save");
        save.setEnabled(false);
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        jLabel5.setText("Sample step");

        SS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SSActionPerformed(evt);
            }
        });

        threshold.setMaximum(255);
        threshold.setValue(0);
        threshold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                thresholdMouseClicked(evt);
            }
        });
        threshold.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                thresholdMouseDragged(evt);
            }
        });

        isinversed.setText("Inverse color");
        isinversed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isinversedActionPerformed(evt);
            }
        });

        jLabel3.setText("Threshold of drilling");

        jLabel6.setText("Amir Mohammad Esmaieeli, amir.esmaieeli@gmail.com");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(isinversed)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(threshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(WP_width, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(WP_height, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MD_depth, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SS, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(save)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(view)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(image_loader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(codegen)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(109, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(threshold, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(isinversed)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(WP_width, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WP_height, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(MD_depth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(SS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(image_loader)
                    .addComponent(jButton2)
                    .addComponent(codegen)
                    .addComponent(view)
                    .addComponent(save)
                    .addComponent(jLabel6))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void image_loaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_image_loaderActionPerformed
        // TODO add your handling code here:
        JFileChooser jFileChooser1 = new javax.swing.JFileChooser();
        jFileChooser1.setFileFilter(new FileNameExtensionFilter("Image files", ImageIO.getReaderFileSuffixes()));
        jFileChooser1.setAcceptAllFileFilterUsed(false);
        int returnVal = jFileChooser1.showOpenDialog(this);
        exts = ((FileNameExtensionFilter) jFileChooser1.getFileFilter()).getExtensions();
        final_exts = exts[0];
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //file_name = jFileChooser1.getSelectedFile().getName();
            file_path = jFileChooser1.getSelectedFile().getPath();
            try {
                read_data(file_path, final_exts);
            } catch (IOException ex) {
            }

            Graphics axis_graphics = axis.getGraphics();

            for (String readerFileSuffixe : ImageIO.getReaderFileSuffixes()) {
                if (readerFileSuffixe.equals(final_exts)) {
                    axis_graphics.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), this);
                }
            }
            axis.repaint();
            black_white_img = make_black_white(img);
            thresgolded_black_white_img = threshold_black_white(black_white_img, threshold.getValue());
            black_white_axis.repaint();
            isimage_ready = true;
            if (isInteger(WP_width.getText()) == true && isInteger(WP_height.getText()) == true && isInteger(MD_depth.getText()) == true && isInteger(SS.getText()) == true && isimage_ready == true) {
                codegen.setEnabled(true);
            } else {
                codegen.setEnabled(false);
            }

        }
    }//GEN-LAST:event_image_loaderActionPerformed

    public static boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
        } catch (NumberFormatException e) {
            return false;
        }
        // only got here if we didn't return false
        return true;
    }

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        frame_width = getContentPane().getSize().width;
        frame_height = getContentPane().getSize().height;
        axis.setBounds(10, 10, (frame_width / 2) - 10, frame_height - 220);
        black_white_axis.setBounds((frame_width / 2) + 10, 10, (frame_width / 2) - 20, frame_height - 220);
    }//GEN-LAST:event_formComponentResized

    private void codegenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codegenActionPerformed
        // TODO add your handling code here:
        String final_code = "G00 X0 Y0 Z1\n";
        Generated_code.setText(final_code);
        Color temp_RGB;
        float scale_x = Float.parseFloat(WP_width.getText()) / (float) black_white_img.getWidth();
        float scale_y = Float.parseFloat(WP_height.getText()) / (float) black_white_img.getHeight();
        int sample_size = Integer.parseInt(SS.getText());

        int m = 0;
        boolean isworking = false;
        for (int i = 0; i < thresgolded_black_white_img.getWidth(); i = i + sample_size) {
            for (int j = 0; j < thresgolded_black_white_img.getHeight(); j = j + sample_size) {
                temp_RGB = new Color(thresgolded_black_white_img.getRGB(i, j));
                if (temp_RGB.getRed() == temp_RGB.getBlue()) {
                    if (isworking == false) {
                        m = m + 1;
                        isworking = true;
                    }
                    m = m + 1;
                } else {
                    if (isworking == true) {
                        m = m + 1;
                        isworking = false;
                    }
                }

            }
        }
        m = m + 1;
        lineVerticies = new Vector3f[m];
        isworking_data = new float[3 * m];

        m = 0;
        int line = 0;
        float last_working_x = 0;
        float last_working_y = 0;
        lineVerticies[m] = new Vector3f(0, 0, 1);
        //isworking_data[0]=0f;
        //isworking_data[0]=0f;
        //isworking_data[0]=1f;
        for (int i = 0; i < black_white_img.getWidth(); i = i + sample_size) {
            line = line + 1;
            if (line % 2 != 0) {//System.out.println(i%2);
                for (int j = 0; j < black_white_img.getHeight(); j = j + sample_size) {
                    temp_RGB = new Color(thresgolded_black_white_img.getRGB(i, j));
                    if (temp_RGB.getRed() == temp_RGB.getBlue()) {
                        if (isworking == false) {
                            m = m + 1;
                            isworking = true;
                            lineVerticies[m] = new Vector3f((float) (scale_x * i), -(float) (scale_y * j), 1);
                            final_code = "G00 X" + Float.toString((float) (scale_x * i)) + " Y" + Float.toString((float) (scale_y * j)) + " Z1" + "\n";
                            Generated_code.append(final_code);
                            isworking_data[3 * m] = 1f;
                            isworking_data[3 * m - 1] = 0f;
                            isworking_data[3 * m - 2] = 0f;
                        }
                        m = m + 1;
                        lineVerticies[m] = new Vector3f((float) (scale_x * i), -(float) (scale_y * j), -(float) (((float) (temp_RGB.getBlue() + temp_RGB.getGreen() + temp_RGB.getRed()) / (float) (3 * 255)) * Integer.parseInt(MD_depth.getText())));
                        final_code = "G01 X" + Float.toString((float) (scale_x * i)) + " Y" + Float.toString((float) (scale_y * j)) + " Z-" + Float.toString((float) (((float) (temp_RGB.getBlue() + temp_RGB.getGreen() + temp_RGB.getRed()) / (float) (3 * 255)) * Integer.parseInt(MD_depth.getText()))) + "\n";
                        Generated_code.append(final_code);
                        isworking_data[3 * m] = 0f;
                        isworking_data[3 * m - 1] = 1f;
                        isworking_data[3 * m - 2] = 0f;
                        last_working_x = (float) (scale_x * (i));
                        last_working_y = (float) (scale_y * (j));
                    } else {
                        if (isworking == true) {
                            m = m + 1;
                            isworking = false;
                            lineVerticies[m] = new Vector3f(last_working_x, -last_working_y, 1);
                            final_code = "G00 X" + Float.toString(last_working_x) + " Y" + Float.toString(last_working_y) + " Z1" + "\n";
                            Generated_code.append(final_code);
                            isworking_data[3 * m] = 1f;
                            isworking_data[3 * m - 1] = 0f;
                            isworking_data[3 * m - 2] = 0f;
                        }
                    }

                }
            } else {
                for (int j = black_white_img.getHeight() - 1; j >= 0; j = j - sample_size) {
                    temp_RGB = new Color(thresgolded_black_white_img.getRGB(i, j));
                    if (temp_RGB.getRed() == temp_RGB.getBlue()) {
                        if (isworking == false) {
                            m = m + 1;
                            isworking = true;
                            lineVerticies[m] = new Vector3f((float) (scale_x * i), -(float) (scale_y * j), 1);
                            final_code = "G00 X" + Float.toString((float) (scale_x * i)) + " Y" + Float.toString((float) (scale_y * j)) + " Z1" + "\n";
                            Generated_code.append(final_code);
                            isworking_data[3 * m] = 1f;
                            isworking_data[3 * m - 1] = 0f;
                            isworking_data[3 * m - 2] = 0f;
                        }
                        m = m + 1;
                        lineVerticies[m] = new Vector3f((float) (scale_x * i), -(float) (scale_y * j), -(float) (((float) (temp_RGB.getBlue() + temp_RGB.getGreen() + temp_RGB.getRed()) / (float) (3 * 255)) * Integer.parseInt(MD_depth.getText())));
                        final_code = "G01 X" + Float.toString((float) (scale_x * i)) + " Y" + Float.toString((float) (scale_y * j)) + " Z-" + Float.toString((float) (((float) (temp_RGB.getBlue() + temp_RGB.getGreen() + temp_RGB.getRed()) / (float) (3 * 255)) * Integer.parseInt(MD_depth.getText()))) + "\n";
                        Generated_code.append(final_code);
                        isworking_data[3 * m] = 0f;
                        isworking_data[3 * m - 1] = 1f;
                        isworking_data[3 * m - 2] = 0f;
                        last_working_x = (float) (scale_x * (i));
                        last_working_y = (float) (scale_y * (j));
                    } else {
                        if (isworking == true) {
                            m = m + 1;
                            isworking = false;
                            lineVerticies[m] = new Vector3f(last_working_x, -last_working_y, 1);
                            final_code = "G00 X" + Float.toString(last_working_x) + " Y" + Float.toString(last_working_y) + " Z1" + "\n";
                            Generated_code.append(final_code);
                            isworking_data[3 * m] = 1f;
                            isworking_data[3 * m - 1] = 0f;
                            isworking_data[3 * m - 2] = 0f;
                        }
                    }

                }
            }
        }
        for (int i = 0; i < lineVerticies.length; i++) {
            if (lineVerticies[i] == null) {
                lineVerticies[i] = lineVerticies[i - 1];
                isworking_data[i] = isworking_data[i - 1];
            }
        }
        view.setEnabled(true);
        save.setEnabled(true);

        //System.out.println(final_code);
    }//GEN-LAST:event_codegenActionPerformed

    private void WP_widthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WP_widthActionPerformed
        // TODO add your handling code here:
        if (isInteger(WP_width.getText()) == true && isInteger(WP_height.getText()) == true && isInteger(MD_depth.getText()) == true && isInteger(SS.getText()) == true && isimage_ready == true) {
            codegen.setEnabled(true);
        } else {
            codegen.setEnabled(false);
        }
    }//GEN-LAST:event_WP_widthActionPerformed

    private void WP_heightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WP_heightActionPerformed
        // TODO add your handling code here:
        if (isInteger(WP_width.getText()) == true && isInteger(WP_height.getText()) == true && isInteger(MD_depth.getText()) == true && isInteger(SS.getText()) == true && isimage_ready == true) {
            codegen.setEnabled(true);
        } else {
            codegen.setEnabled(false);
        }
    }//GEN-LAST:event_WP_heightActionPerformed

    private void MD_depthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MD_depthActionPerformed
        // TODO add your handling code here:
        if (isInteger(WP_width.getText()) == true && isInteger(WP_height.getText()) == true && isInteger(MD_depth.getText()) == true && isInteger(SS.getText()) == true && isimage_ready == true) {
            codegen.setEnabled(true);
        } else {
            codegen.setEnabled(false);
        }
    }//GEN-LAST:event_MD_depthActionPerformed

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        // TODO add your handling code here:
        app = new mesh_drawing(lineVerticies, 1, (Float.parseFloat(WP_width.getText()) + Float.parseFloat(WP_height.getText())) / 2, isworking_data);
        Sim_speed Sim_speed_gui = new Sim_speed(main_frame[0], false, app, lineVerticies, isworking_data);
        app.setShowSettings(false);
        AppSettings settings = new AppSettings(true);
        settings.setResolution(800, 600);
//        settings.setFullscreen(true);
        settings.setBitsPerPixel(24);
        app.setSettings(settings);
        app.setPauseOnLostFocus(false);
        app.start();
        Sim_speed_gui.setVisible(true);
    }//GEN-LAST:event_viewActionPerformed

    private void SSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SSActionPerformed
        // TODO add your handling code here:
        if (isInteger(WP_width.getText()) == true && isInteger(WP_height.getText()) == true && isInteger(MD_depth.getText()) == true && isInteger(SS.getText()) == true && isimage_ready == true) {
            codegen.setEnabled(true);
        } else {
            codegen.setEnabled(false);
        }
    }//GEN-LAST:event_SSActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        JFileChooser fc_save = new JFileChooser();
        fc_save.setFileFilter(new FileNameExtensionFilter("NC file", "nc"));
        fc_save.setAcceptAllFileFilterUsed(false);
        int returnVal = fc_save.showSaveDialog(this);
        String[] save_exts = ((FileNameExtensionFilter) fc_save.getFileFilter()).getExtensions();
        String save_final_exts = save_exts[0];
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String file_name = fc_save.getSelectedFile().getName();
            String save_file_path = fc_save.getSelectedFile().getAbsolutePath();
            try {
                write_data(save_file_path, file_name, save_final_exts);
            } catch (IOException ex) {
            }
        }
    }//GEN-LAST:event_saveActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Frame[] this_main_frame = Main_frame.getFrames();
        this_main_frame[0].dispose();
        app.stop();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void thresholdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_thresholdMouseClicked
        // TODO add your handling code here:
        if (black_white_img != null) {
            thresgolded_black_white_img = threshold_black_white(black_white_img, threshold.getValue());
            black_white_axis.repaint();
        }

    }//GEN-LAST:event_thresholdMouseClicked

    private void thresholdMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_thresholdMouseDragged
        // TODO add your handling code here:
        if (black_white_img != null) {
            thresgolded_black_white_img = threshold_black_white(black_white_img, threshold.getValue());
            black_white_axis.repaint();
        }
    }//GEN-LAST:event_thresholdMouseDragged

    private void isinversedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isinversedActionPerformed
        // TODO add your handling code here:
        if (black_white_img != null) {
            thresgolded_black_white_img = threshold_black_white(black_white_img, threshold.getValue());
            black_white_axis.repaint();
        }
    }//GEN-LAST:event_isinversedActionPerformed

    public void write_data(String file_path, String file_name, String exts) throws IOException {
        System.out.println(file_path + exts);
        //System.out.println(Paths.get(file_path+exts).toString());
        File file = new File(file_path + "." + exts);
        // creates the file
        file.createNewFile();
        // creates a FileWriter Object
        FileWriter writer = new FileWriter(file);
        // Writes the content to the file
        writer.write(Generated_code.getText());
        writer.flush();
        writer.close();
    }

    public static void read_data(String file_name, String final_exts) throws IOException {
        for (String readerFileSuffixe : ImageIO.getReaderFileSuffixes()) {
            if (readerFileSuffixe.equals(final_exts)) {
                //System.out.println("Image is loaded!!!");
                try {
                    img = ImageIO.read(new File(file_name));
                } catch (IOException e) {
                }

            }
        }
    }

    public BufferedImage make_black_white(BufferedImage img) {
        BufferedImage final_img = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_RGB);
        Color temp_RGB;
        Color dispatche_RGB;

        for (int i = 0; i < img.getWidth(); i++) {
            for (int j = 0; j < img.getHeight(); j++) {
                temp_RGB = new Color(img.getRGB(i, j));
                //System.out.println((temp_RGB.getBlue()+temp_RGB.getGreen()+temp_RGB.getRed())/(2*255));
                dispatche_RGB = new Color((((temp_RGB.getBlue() + temp_RGB.getGreen() + temp_RGB.getRed()) / (3))), (((temp_RGB.getBlue() + temp_RGB.getGreen() + temp_RGB.getRed()) / (3))), (((temp_RGB.getBlue() + temp_RGB.getGreen() + temp_RGB.getRed()) / (3))));
                final_img.setRGB(i, j, dispatche_RGB.getRGB());
            }
        }

        return final_img;
    }

    public BufferedImage threshold_black_white(BufferedImage black_white_img, int threshold) {
        BufferedImage final_img = new BufferedImage(black_white_img.getWidth(), black_white_img.getHeight(), BufferedImage.TYPE_INT_RGB);
        Color temp_RGB;
        Color dispatche_RGB;
        for (int i = 0; i < black_white_img.getWidth(); i++) {
            for (int j = 0; j < black_white_img.getHeight(); j++) {
                temp_RGB = new Color(black_white_img.getRGB(i, j));
                //System.out.println((temp_RGB.getBlue()+temp_RGB.getGreen()+temp_RGB.getRed())/(2*255));
                if (isinversed.isSelected() == false) {
                    if (temp_RGB.getRed() < threshold) {
                        dispatche_RGB = new Color(255, 0, 0);
                        final_img.setRGB(i, j, dispatche_RGB.getRGB());
                    } else {
                        final_img.setRGB(i, j, temp_RGB.getRGB());
                    }
                } else {
                    if (temp_RGB.getRed() > threshold) {
                        dispatche_RGB = new Color(255, 0, 0);
                        final_img.setRGB(i, j, dispatche_RGB.getRGB());
                    } else {
                        final_img.setRGB(i, j, temp_RGB.getRGB());
                    }
                }


            }
        }

        return final_img;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_frame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Generated_code;
    private javax.swing.JTextField MD_depth;
    private javax.swing.JTextField SS;
    private javax.swing.JTextField WP_height;
    private javax.swing.JTextField WP_width;
    private javax.swing.JButton codegen;
    private javax.swing.JButton image_loader;
    private javax.swing.JToggleButton isinversed;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton save;
    private javax.swing.JSlider threshold;
    private javax.swing.JButton view;
    // End of variables declaration//GEN-END:variables
    JPanel axis = new JPanel() {
        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.setColor(Color.white);
            g.fillRect(0, 0, frame_width - 20, frame_height - 20);
            for (String readerFileSuffixe : ImageIO.getReaderFileSuffixes()) {
                if (readerFileSuffixe.equals(final_exts)) {
                    g.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), this);
                }
            }

        }
    };
    JPanel black_white_axis = new JPanel() {
        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.setColor(Color.white);
            g.fillRect(0, 0, frame_width - 20, frame_height - 20);
            for (String readerFileSuffixe : ImageIO.getReaderFileSuffixes()) {
                if (readerFileSuffixe.equals(final_exts)) {
                    g.drawImage(thresgolded_black_white_img, 0, 0, this.getWidth(), this.getHeight(), this);
                }
            }

        }
    };
    Frame[] main_frame;
    static public String file_path = "";
    public static String final_exts = null;
    public static String[] exts;
    public static BufferedImage img = null;
    public static BufferedImage black_white_img = null;
    public static BufferedImage thresgolded_black_white_img = null;
    public int frame_width = 800;
    public int frame_height = 600;
    Vector3f[] lineVerticies;
    boolean isimage_ready = false;
    float[] isworking_data;
    mesh_drawing app;
}
